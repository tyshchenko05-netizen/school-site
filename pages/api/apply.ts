import type { NextApiRequest, NextApiResponse } from "next";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") return res.status(405).json({ ok:false, error:"Method not allowed" });

  try {
    const data = req.body || {};
    const token = process.env.TG_BOT_TOKEN!;
    const chatId = process.env.TG_CHAT_ID!;
    if (!token || !chatId) return res.status(500).json({ ok:false, error:"Missing TG env vars" });

    const price = data?.pricePerMonth ? `${Number(data.pricePerMonth).toLocaleString("ru-RU")} ‚ÇΩ` : "‚Äî";
    const lines = [
      "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞",
      `–ö—É—Ä—Å: ${data.course || "‚Äî"}`,
      `–í–æ–∑—Ä–∞—Å—Ç: ${data.age || "‚Äî"} | –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${data.category || "‚Äî"}`,
      `–†–æ–¥–∏—Ç–µ–ª—å: ${data.parentName || "‚Äî"}`,
      `–¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone || "‚Äî"}`,
      `E-mail: ${data.email || "‚Äî"}`,
      `–†–µ–±—ë–Ω–æ–∫: ${data.childName || "‚Äî"}`,
      `–í—Ä–µ–º—è: ${data.timePref || "‚Äî"}`,
      `–í—Ç–æ—Ä–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${data.secondCourse || "‚Äî"}`,
      `–í—Ç–æ—Ä–æ–π —Ä–µ–±—ë–Ω–æ–∫: ${data.secondChild ? "–î–∞" : "–ù–µ—Ç"}`,
      `–¶–µ–Ω–∞/–º–µ—Å: ${price}`,
    ].join("\n");

    const resp = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type":"application/json" },
      body: JSON.stringify({ chat_id: chatId, text: lines, disable_web_page_preview: true }),
    });

    if (!resp.ok) throw new Error(`Telegram API ${resp.status}`);
    res.status(200).json({ ok:true });
  } catch (e:any) {
    res.status(500).json({ ok:false, error:e.message || "unknown" });
  }
}
